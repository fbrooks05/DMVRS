/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EE333;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;
import javax.swing.JOptionPane;

/**
 *
 * @author Brooks
 */
public class DMVRSJFrame extends javax.swing.JFrame {

    /**
     * Creates new form DMVRSJFrame
     */
    public DMVRSJFrame() {
        initComponents();
        
        jButtonImportVehicle.setVisible(false);
        jButtonImportRegistrant.setVisible(false);
        jButtonImportInsurance.setVisible(false);
        jButtonImportRegistration.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        employeeInfo1 = new EE333.EmployeeInfo();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonExportVehicle = new javax.swing.JButton();
        vehicleJPanel1 = new EE333.VehicleJPanel();
        jButtonImportVehicle = new javax.swing.JButton();
        jButtonCheckVIN = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        employeeJPanel1 = new EE333.EmployeeJPanel();
        jButtonExportEmployee = new javax.swing.JButton();
        jButtonImportEmployee = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonExportRegistrant = new javax.swing.JButton();
        registrantJPanel1 = new EE333.RegistrantJPanel();
        jButtonImportRegistrant = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        insuranceJPanel1 = new EE333.InsuranceJPanel();
        jButtonExportInsurance = new javax.swing.JButton();
        jButtonImportInsurance = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButtonExportRegistration = new javax.swing.JButton();
        registrationInfoJPanel1 = new EE333.RegistrationInfoJPanel();
        jButtonImportRegistration = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButtonCompleteRegistration = new javax.swing.JButton();
        jButtonMakeInactive = new javax.swing.JButton();
        jButtonChangeInsurance = new javax.swing.JButton();
        jButtonChangeRegistrant = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonExportVehicle.setText("ExportVehicle");
        jButtonExportVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportVehicleActionPerformed(evt);
            }
        });

        jButtonImportVehicle.setText("ImportVehicle");
        jButtonImportVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportVehicleActionPerformed(evt);
            }
        });

        jButtonCheckVIN.setText("CheckVIN");
        jButtonCheckVIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckVINActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vehicleJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonExportVehicle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImportVehicle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCheckVIN)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vehicleJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExportVehicle)
                    .addComponent(jButtonImportVehicle)
                    .addComponent(jButtonCheckVIN))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("VehicleInfo", jPanel1);

        jButtonExportEmployee.setText("ExportEmployee");
        jButtonExportEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportEmployeeActionPerformed(evt);
            }
        });

        jButtonImportEmployee.setText("ImportEmployee");
        jButtonImportEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportEmployeeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonExportEmployee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImportEmployee)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(employeeJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExportEmployee)
                    .addComponent(jButtonImportEmployee))
                .addContainerGap(453, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("EmployeeInfo", jPanel2);

        jButtonExportRegistrant.setText("ExportRegistrant");
        jButtonExportRegistrant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportRegistrantActionPerformed(evt);
            }
        });

        jButtonImportRegistrant.setText("ImportRegistrant");
        jButtonImportRegistrant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportRegistrantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrantJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButtonExportRegistrant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImportRegistrant)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registrantJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExportRegistrant)
                    .addComponent(jButtonImportRegistrant))
                .addContainerGap(283, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registrant", jPanel3);

        jButtonExportInsurance.setText("ExportInsurance");
        jButtonExportInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportInsuranceActionPerformed(evt);
            }
        });

        jButtonImportInsurance.setText("ImportInsurance");
        jButtonImportInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportInsuranceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insuranceJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButtonExportInsurance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImportInsurance)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(insuranceJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExportInsurance)
                    .addComponent(jButtonImportInsurance))
                .addContainerGap(455, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Insurance", jPanel4);

        jButtonExportRegistration.setText("ExportRegistration");
        jButtonExportRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportRegistrationActionPerformed(evt);
            }
        });

        jButtonImportRegistration.setText("ImportRegistration");
        jButtonImportRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportRegistrationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrationInfoJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButtonExportRegistration)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImportRegistration)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registrationInfoJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExportRegistration)
                    .addComponent(jButtonImportRegistration))
                .addContainerGap(388, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registration", jPanel5);

        jButtonCompleteRegistration.setText("CompleteRegistration");
        jButtonCompleteRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompleteRegistrationActionPerformed(evt);
            }
        });

        jButtonMakeInactive.setText("MakeInactive");
        jButtonMakeInactive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMakeInactiveActionPerformed(evt);
            }
        });

        jButtonChangeInsurance.setText("ChangeInsurance");
        jButtonChangeInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeInsuranceActionPerformed(evt);
            }
        });

        jButtonChangeRegistrant.setText("ChangeRegistrant");
        jButtonChangeRegistrant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeRegistrantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCompleteRegistration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonMakeInactive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonChangeInsurance)
                    .addComponent(jButtonChangeRegistrant))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCompleteRegistration)
                    .addComponent(jButtonChangeInsurance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonChangeRegistrant)
                    .addComponent(jButtonMakeInactive))
                .addContainerGap(563, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Finish", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExportEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportEmployeeActionPerformed
        // TODO add your handling code here:
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Employee.txt");
        
//        String outputFileName = "";
//        java.io.File outputFile;
        boolean results = FileExists(outputFile);
        boolean resultsActive = FileExistsActive(VehicleVIN, "Employee.txt");
        boolean resultsInactive = FileExistsInactive(VehicleVIN, "Employee.txt");
        boolean resultsUnknown = FileExistsUnknown(VehicleVIN, "Employee.txt");
        
        if ( (resultsActive == true) || (resultsInactive == true) || (resultsUnknown == true)) {
            // VIN folder already exists
            JOptionPane.showMessageDialog(rootPane, "File already exists!", "File Error", JOptionPane.ERROR_MESSAGE);
        } else {
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;

    //        outputFileName = "Employee.txt";

            try { 
                this.employeeJPanel1.updateUnderlyingObject();
    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.employeeJPanel1.getEmployeeInfo().exportCustom());

                outputFileWriter.close();

            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        }
    }//GEN-LAST:event_jButtonExportEmployeeActionPerformed

    private void jButtonExportInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportInsuranceActionPerformed
        // TODO add your handling code here:
         String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
        
//        String outputFileName = "";
//        java.io.File outputFile;

//        boolean results = FileExists(outputFile);
        boolean resultsActive = FileExistsActive(VehicleVIN, "Insurance.txt");
        boolean resultsInactive = FileExistsInactive(VehicleVIN, "Insurance.txt");
        boolean resultsUnknown = FileExistsUnknown(VehicleVIN, "Insurance.txt");
        
        if ( (resultsActive == true) || (resultsInactive == true) || (resultsUnknown == true)) {
            // VIN folder already exists
            JOptionPane.showMessageDialog(rootPane, "File already exists!", "File Error", JOptionPane.ERROR_MESSAGE);
        } else {
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;


    //        outputFileName = "Insurance.txt";

            try {
                this.insuranceJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.insuranceJPanel1.getInsuranceInfo().exportCustom() );

                outputFileWriter.close();
            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        }
    }//GEN-LAST:event_jButtonExportInsuranceActionPerformed

    private void jButtonExportRegistrantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportRegistrantActionPerformed
        // TODO add your handling code here:
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
        
//        String outputFileName = "";
//        java.io.File outputFile;

//        boolean results = FileExists(outputFile);
        boolean resultsActive = FileExistsActive(VehicleVIN, "Registrant.txt");
        boolean resultsInactive = FileExistsInactive(VehicleVIN, "Registrant.txt");
        boolean resultsUnknown = FileExistsUnknown(VehicleVIN, "Registrant.txt");
        
        if ( (resultsActive == true) || (resultsInactive == true) || (resultsUnknown == true)) {
            // VIN folder already exists
            JOptionPane.showMessageDialog(rootPane, "File already exists!", "File Error", JOptionPane.ERROR_MESSAGE);
        } else {
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;

    //        outputFileName = "RegistrantInfo.txt";

            try {
                this.registrantJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.registrantJPanel1.getRegistrant().exportCustom());

                outputFileWriter.close();

            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        }
    }//GEN-LAST:event_jButtonExportRegistrantActionPerformed

    private void jButtonExportVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportVehicleActionPerformed
        // TODO add your handling code here:\
        
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Vehicle.txt");
//        boolean results = FileExists(outputFile);
        boolean resultsActive = FileExistsActive(VehicleVIN, "Vehicle.txt");
        boolean resultsInactive = FileExistsInactive(VehicleVIN, "Vehicle.txt");
        boolean resultsUnknown = FileExistsUnknown(VehicleVIN, "Vehicle.txt");
        
        if ( (resultsActive == true) || (resultsInactive == true) || (resultsUnknown == true)) {
            // VIN folder already exists
            JOptionPane.showMessageDialog(rootPane, "File already exists!", "File Error", JOptionPane.ERROR_MESSAGE);
        } else {
//             VIN does not exist
        
        VINFolder.mkdirs();
//        String outputFileName = "";
//        java.io.File outputFile;
        java.io.FileWriter outputFileWriter;
        
//        outputFileName = "Vehicle.txt";
        
            try {
               this.vehicleJPanel1.updateUnderlyingObject();

                outputFileWriter = new java.io.FileWriter(outputFile);

                if (this.vehicleJPanel1.getType().compareToIgnoreCase("Cycle") == 0) {

                    outputFileWriter.write( this.vehicleJPanel1.getTempCycle().exportCustom() );

                } else if (this.vehicleJPanel1.getType().compareToIgnoreCase("Car") == 0) {

                    outputFileWriter.write( this.vehicleJPanel1.getTempCar().exportCustom() ); 

                } else if (this.vehicleJPanel1.getType().compareToIgnoreCase("Truck") == 0) {

                    outputFileWriter.write( this.vehicleJPanel1.getTempTruck().exportCustom() );

                } else {

                }

                outputFileWriter.close();

            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
                // not working properly.
                    // returns java.lang.NullPointerException
            }
        }
        
    }//GEN-LAST:event_jButtonExportVehicleActionPerformed

    private void jButtonExportRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportRegistrationActionPerformed
        // TODO add your handling code here:
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "RegistrationInfo.txt");
        
        boolean resultsActive = FileExistsActive(VehicleVIN, "RegistrationInfo.txt");
        boolean resultsInactive = FileExistsInactive(VehicleVIN, "RegistrationInfo.txt");
        boolean resultsUnknown = FileExistsUnknown(VehicleVIN, "RegistrationInfo.txt");
        
//        String outputFileName = "";
//        java.io.File outputFile;
        boolean results = FileExists(outputFile);
        
        
        if ( (resultsActive == true) || (resultsInactive == true) || (resultsUnknown == true)) {
            // VIN folder already exists
            JOptionPane.showMessageDialog(rootPane, "File already exists!", "File Error", JOptionPane.ERROR_MESSAGE);
        } else {
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;

    //        outputFileName = "RegistrationInfo.txt";

            try {
                this.registrationInfoJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.registrationInfoJPanel1.getRegistrationInfo().exportCustom() );

                outputFileWriter.close();

            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        }
    }//GEN-LAST:event_jButtonExportRegistrationActionPerformed

    private void jButtonMakeInactiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMakeInactiveActionPerformed
        // TODO add your handling code here:
        // must make an active vehicle inactive
        // Ask myers how to make the status of a car, cycle, or truck Inactive
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        java.io.File activeFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Active");
        java.io.File activeVINFolder = new java.io.File(activeFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File inactiveFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Inactive");
        java.io.File inactiveVINFolder = new java.io.File(inactiveFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File vehicleInputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "Vehicle.txt");
        java.io.File employeeInputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "Employee.txt");
        java.io.File registrantInputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
        java.io.File registrationInfoInputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "RegistrationInfo.txt");
        java.io.File insuranceInputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
        
        java.io.File vehicleOutputFile = new java.io.File(inactiveVINFolder.getAbsolutePath() + "\\" + "Vehicle.txt");
        java.io.File employeeOutputFile = new java.io.File(inactiveVINFolder.getAbsolutePath() + "\\" + "Employee.txt");
        java.io.File registrantOutputFile = new java.io.File(inactiveVINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
        java.io.File registrationInfoOutputFile = new java.io.File(inactiveVINFolder.getAbsolutePath() + "\\" + "RegistrationInfo.txt");
        java.io.File insuranceOutputFile = new java.io.File(inactiveVINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
        
        // first we need to know if ALL of our files exist in the active folder
        boolean resultsVehicle = FileExistsActive(VehicleVIN, "Vehicle.txt");
        boolean resultsEmployee = FileExistsActive(VehicleVIN, "Employee.txt");
        boolean resultsRegistrant = FileExistsActive(VehicleVIN, "Registrant.txt");
        boolean resultsRegistrationInfo = FileExistsActive(VehicleVIN, "RegistrationInfo.txt");
        boolean resultsInsurance = FileExistsActive(VehicleVIN, "Insurance.txt");
        
        // contents variable declarations
        String vehicleContents = "";
        String employeeContents = "";
        String registrantContents = "";
        String registrationInfoContents = "";
        String insuranceContents = "";
        
        String vehicleClassification = "";
        
        // Imported objects
        EE333.Vehicle tempVehicle = new EE333.Vehicle(); // only used to check the status of the vehicle
        EE333.Car tempCar = new EE333.Car();
        EE333.Cycle tempCycle = new EE333.Cycle();
        EE333.Truck tempTruck = new EE333.Truck();
        EE333.EmployeeInfo tempEmployeeInfo = new EE333.EmployeeInfo();
        EE333.Registrant tempRegistrant = new EE333.Registrant();
        EE333.RegistrationInfo tempRegistrationInfo = new EE333.RegistrationInfo();
        EE333.InsuranceInfo tempInsuranceInfo = new EE333.InsuranceInfo();
        
        // output file writer
        java.io.FileWriter outputFileWriter;
        
        // output file write results
        boolean outputVehicle = false;
        boolean outputEmployee = false;
        boolean outputregistrant = false;
        boolean outputRegistrationInfo = false;
        boolean outputInsurance = false;
        
        // Next we need to read the first three files and make sure all 3 statuses are "Active"
        if( (resultsVehicle == true) && (resultsEmployee == true) && (resultsRegistrant == true) && (resultsRegistrationInfo == true) && (resultsInsurance == true) ) {
            
            // read all 5 files
            vehicleContents = importString(vehicleInputFile);
            employeeContents = importString(employeeInputFile);
            registrantContents = importString(registrantInputFile);
            registrationInfoContents = importString(registrationInfoInputFile);
            insuranceContents = importString(insuranceInputFile);
            
            // first we need what the vehicle classification is...
            vehicleClassification = this.vehicleJPanel1.classificationIdentifier(vehicleContents);
            
            if (vehicleClassification.compareToIgnoreCase("car") == 0 ) {
                tempCar = EE333.Car.importCustom(vehicleContents);
                tempCar.setStatus(EE333.Status.inactive);
            } else if ( vehicleClassification.compareToIgnoreCase("cycle") == 0) {
                tempCycle = EE333.Cycle.importCustom(vehicleContents);
                tempCycle.setStatus(EE333.Status.inactive);
            } else if ( vehicleClassification.compareToIgnoreCase("truck") == 0) {
                tempTruck = EE333.Truck.importCustom(vehicleContents);
                tempTruck.setStatus(EE333.Status.inactive);
            }
            
            tempEmployeeInfo = EE333.EmployeeInfo.importCustom(employeeContents);
            tempRegistrant = EE333.Registrant.importCustom(registrantContents);
            tempRegistrationInfo = EE333.RegistrationInfo.importCustom(registrationInfoContents);
            tempInsuranceInfo = EE333.InsuranceInfo.importCustom(insuranceContents);
            
            inactiveVINFolder.mkdirs();
            
            try {

                outputFileWriter = new java.io.FileWriter(vehicleOutputFile);


                if((vehicleClassification.compareToIgnoreCase("car") == 0) && (tempCar != null ) ) {
                    outputFileWriter.write(tempCar.exportCustom());
                    outputVehicle = true;
                } else if ((vehicleClassification.compareToIgnoreCase("cycle") == 0) && (tempCycle != null ) ) {
                    outputFileWriter.write(tempCycle.exportCustom());
                    outputVehicle = true;
                } else if ((vehicleClassification.compareToIgnoreCase("truck") == 0) && (tempTruck != null ) ) {
                    outputFileWriter.write(tempTruck.exportCustom());
                    outputVehicle = true;
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Vehicle object is invalid", "File Error", JOptionPane.ERROR_MESSAGE);
                }

                outputFileWriter.close();
            } catch (java.lang.Exception ex) {
                System.out.println( ex.toString() );
            }
            
            try {

                outputFileWriter = new java.io.FileWriter(employeeOutputFile);

                outputFileWriter.write(tempEmployeeInfo.exportCustom());
                outputEmployee = true;

                outputFileWriter.close();
            } catch (java.lang.Exception ex) {
                System.out.println( ex.toString() );
            }            
            
            try {

                outputFileWriter = new java.io.FileWriter(registrantOutputFile);

                outputFileWriter.write(tempRegistrant.exportCustom());
                outputEmployee = true;

                outputFileWriter.close();
            } catch (java.lang.Exception ex) {
                System.out.println( ex.toString() );
            }

            try {

                outputFileWriter = new java.io.FileWriter(registrationInfoOutputFile);

                outputFileWriter.write(tempRegistrationInfo.exportCustom());
                outputEmployee = true;

                outputFileWriter.close();
            } catch (java.lang.Exception ex) {
                System.out.println( ex.toString() );
            }

            try {

                outputFileWriter = new java.io.FileWriter(insuranceOutputFile);

                outputFileWriter.write(tempInsuranceInfo.exportCustom());
                outputEmployee = true;

                outputFileWriter.close();
            } catch (java.lang.Exception ex) {
                System.out.println( ex.toString() );
            }
            
            // and delete the old files
                try {
                    vehicleInputFile.delete();
                    registrantInputFile.delete();
                    employeeInputFile.delete();
                    registrationInfoInputFile.delete();
                    insuranceInputFile.delete();
                    Files.delete(activeVINFolder.toPath());
                } catch (IOException ex) {
                    System.out.println( ex.toString() );
                }
            
        } else {
            // one of our files is missing and we need to throw an error message.
            JOptionPane.showMessageDialog(rootPane, "One or more files do not exist!", "File Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButtonMakeInactiveActionPerformed

    private void jButtonCompleteRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompleteRegistrationActionPerformed
        // TODO add your handling code here:
        // takes an unknown vehicle and makes it active
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        java.io.File unknownVINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File activeFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Active");
        java.io.File activeVINFolder = new java.io.File(activeFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
        java.io.File vehicleInputFile = new java.io.File(unknownVINFolder.getAbsolutePath() + "\\" + "Vehicle.txt");
        java.io.File employeeInputFile = new java.io.File(unknownVINFolder.getAbsolutePath() + "\\" + "Employee.txt");
        java.io.File registrantInputFile = new java.io.File(unknownVINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
        java.io.File registrationInfoInputFile = new java.io.File(unknownVINFolder.getAbsolutePath() + "\\" + "RegistrationInfo.txt");
        java.io.File insuranceInputFile = new java.io.File(unknownVINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
        
        java.io.File vehicleOutputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "Vehicle.txt");
        java.io.File employeeOutputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "Employee.txt");
        java.io.File registrantOutputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
        java.io.File registrationInfoOutputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "RegistrationInfo.txt");
        java.io.File insuranceOutputFile = new java.io.File(activeVINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
        
        // first we need to know if ALL of our files exist in the unknown folder
        boolean resultsVehicle = FileExistsUnknown(VehicleVIN, "Vehicle.txt");
        boolean resultsEmployee = FileExistsUnknown(VehicleVIN, "Employee.txt");
        boolean resultsRegistrant = FileExistsUnknown(VehicleVIN, "Registrant.txt");
        boolean resultsRegistrationInfo = FileExistsUnknown(VehicleVIN, "RegistrationInfo.txt");
        boolean resultsInsurance = FileExistsUnknown(VehicleVIN, "Insurance.txt");
        
        // contents variable declarations
        String vehicleContents = "";
        String employeeContents = "";
        String registrantContents = "";
        String registrationInfoContents = "";
        String insuranceContents = "";
        
        String vehicleClassification = "";
        
        // Imported objects
        EE333.Vehicle tempVehicle = new EE333.Vehicle(); // only used to check the status of the vehicle
        EE333.Car tempCar = new EE333.Car();
        EE333.Cycle tempCycle = new EE333.Cycle();
        EE333.Truck tempTruck = new EE333.Truck();
        EE333.EmployeeInfo tempEmployeeInfo = new EE333.EmployeeInfo();
        EE333.Registrant tempRegistrant = new EE333.Registrant();
        EE333.RegistrationInfo tempRegistrationInfo = new EE333.RegistrationInfo();
        EE333.InsuranceInfo tempInsuranceInfo = new EE333.InsuranceInfo();
        
        // output file writer
        java.io.FileWriter outputFileWriter;
        
        // output file write results
        boolean outputVehicle = false;
        boolean outputEmployee = false;
        boolean outputregistrant = false;
        boolean outputRegistrationInfo = false;
        boolean outputInsurance = false;
        
        // Next we need to read the first three files and make sure all 3 statuses are "Active"
        if( (resultsVehicle == true) && (resultsEmployee == true) && (resultsRegistrant == true) && (resultsRegistrationInfo == true) && (resultsInsurance == true) ) {
            // All of our files at least exist...
            // we need to read the contents of the first three files
            vehicleContents = importString(vehicleInputFile);
            employeeContents = importString(employeeInputFile);
            registrantContents = importString(registrantInputFile);
            
            // we need to make objects out of the information we just gathered...
            tempVehicle = EE333.Vehicle.importCustom(vehicleContents);
            // first we need what the vehicle classification is...
            vehicleClassification = this.vehicleJPanel1.classificationIdentifier(vehicleContents);
            
            if (vehicleClassification.compareToIgnoreCase("car") == 0 ) {
                tempCar = EE333.Car.importCustom(vehicleContents);
            } else if ( vehicleClassification.compareToIgnoreCase("cycle") == 0) {
                tempCycle = EE333.Cycle.importCustom(vehicleContents);
            } else if ( vehicleClassification.compareToIgnoreCase("truck") == 0) {
                tempTruck = EE333.Truck.importCustom(vehicleContents);
            }
            
            tempEmployeeInfo = EE333.EmployeeInfo.importCustom(employeeContents);
            tempRegistrant = EE333.Registrant.importCustom(registrantContents);
            
            // Now we need to check the status
            if( (tempVehicle.getStatus() == EE333.Status.active) && (tempEmployeeInfo.getStatus() == EE333.Status.active) && (tempRegistrant.getStatus() == EE333.Status.active) ) {
                activeVINFolder.mkdirs();
                // all of the statuses are active 
                // we can now proceed to import the other files
                registrationInfoContents = importString(registrationInfoInputFile);
                insuranceContents = importString(insuranceInputFile);
                
                tempRegistrationInfo = EE333.RegistrationInfo.importCustom(registrationInfoContents);
                tempInsuranceInfo = EE333.InsuranceInfo.importCustom(insuranceContents);
                
                // now we should check to see if any objects == new _____;
                // if all objects != new ____; we write to the files 
                try {
                    
                    outputFileWriter = new java.io.FileWriter(vehicleOutputFile);
                    
                    
                    if((vehicleClassification.compareToIgnoreCase("car") == 0) && (tempCar != null ) ) {
                        outputFileWriter.write(tempCar.exportCustom());
                        outputVehicle = true;
                    } else if ((vehicleClassification.compareToIgnoreCase("cycle") == 0) && (tempCycle != null ) ) {
                        outputFileWriter.write(tempCycle.exportCustom());
                        outputVehicle = true;
                    } else if ((vehicleClassification.compareToIgnoreCase("truck") == 0) && (tempTruck != null ) ) {
                        outputFileWriter.write(tempTruck.exportCustom());
                        outputVehicle = true;
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Vehicle object is invalid", "File Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    outputFileWriter.close();
                } catch (java.lang.Exception ex) {
                    System.out.println( ex.toString() );
                }
                
                try {
                    
                    outputFileWriter = new java.io.FileWriter(employeeOutputFile);
                    
                    outputFileWriter.write(tempEmployeeInfo.exportCustom());
                    outputEmployee = true;
                    
                    outputFileWriter.close();
                } catch (java.lang.Exception ex) {
                    System.out.println( ex.toString() );
                }
                
                try {
                    
                    outputFileWriter = new java.io.FileWriter(registrantOutputFile);
                    
                    outputFileWriter.write(tempRegistrant.exportCustom());
                    outputEmployee = true;
                    
                    outputFileWriter.close();
                } catch (java.lang.Exception ex) {
                    System.out.println( ex.toString() );
                }
                
                try {
                    
                    outputFileWriter = new java.io.FileWriter(registrationInfoOutputFile);
                    
                    outputFileWriter.write(tempRegistrationInfo.exportCustom());
                    outputEmployee = true;
                    
                    outputFileWriter.close();
                } catch (java.lang.Exception ex) {
                    System.out.println( ex.toString() );
                }
                
                try {
                    
                    outputFileWriter = new java.io.FileWriter(insuranceOutputFile);
                    
                    outputFileWriter.write(tempInsuranceInfo.exportCustom());
                    outputEmployee = true;
                    
                    outputFileWriter.close();
                } catch (java.lang.Exception ex) {
                    System.out.println( ex.toString() );
                }
                
                // and delete the old files
                try {
                    vehicleInputFile.delete();
                    registrantInputFile.delete();
                    employeeInputFile.delete();
                    registrationInfoInputFile.delete();
                    insuranceInputFile.delete();
                    Files.delete(unknownVINFolder.toPath());
                } catch (IOException ex) {
                    System.out.println( ex.toString() );
                }
                
                
                
            } else {
                JOptionPane.showMessageDialog(rootPane, "Vehicle, employee, or registrant is not active!", "Status Error", JOptionPane.ERROR_MESSAGE);
            }
            
            
        } else {
            // one of our files is missing and we need to throw an error message.
            JOptionPane.showMessageDialog(rootPane, "One or more files do not exist!", "File Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_jButtonCompleteRegistrationActionPerformed

    private void jButtonImportEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportEmployeeActionPerformed
        // TODO add your handling code here:
        String EmployeeID = this.employeeJPanel1.returnEmployeeID();
        java.io.File employeesFolder = new java.io.File("Employees");
        employeesFolder.mkdirs();
        java.io.File inputFile = new java.io.File(employeesFolder.getAbsolutePath() + "\\" + EmployeeID +".txt");
        
        
        
        this.employeeJPanel1.importCustom(inputFile);
    }//GEN-LAST:event_jButtonImportEmployeeActionPerformed

    private void jButtonImportInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportInsuranceActionPerformed
        // TODO add your handling code here:
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        VINFolder.mkdirs();
        java.io.File inputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
        
        
        this.insuranceJPanel1.importCustom(inputFile);
    }//GEN-LAST:event_jButtonImportInsuranceActionPerformed

    private void jButtonImportRegistrantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportRegistrantActionPerformed
        // TODO add your handling code here:
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        VINFolder.mkdirs();
        java.io.File inputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
        
        
        
        this.registrantJPanel1.importCustom(inputFile);
    }//GEN-LAST:event_jButtonImportRegistrantActionPerformed

    private void jButtonImportRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportRegistrationActionPerformed
        // TODO add your handling code here:
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        VINFolder.mkdirs();
        java.io.File inputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "RegistrationInfo.txt");
        
        
        
        this.registrationInfoJPanel1.importCustom(inputFile);
    }//GEN-LAST:event_jButtonImportRegistrationActionPerformed

    private void jButtonImportVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportVehicleActionPerformed
        // TODO add your handling code here:
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        VINFolder.mkdirs();
        java.io.File inputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Vehicle.txt");
        
        this.vehicleJPanel1.importCustom(inputFile);
    }//GEN-LAST:event_jButtonImportVehicleActionPerformed

    private void jButtonChangeRegistrantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeRegistrantActionPerformed
        // TODO add your handling code here:
        // ASK WHERE TO ADD A STATUS CHECKER.
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        
        boolean resultsActive = FileExistsActive(VehicleVIN, "Registrant.txt");
        boolean resultsInactive = FileExistsInactive(VehicleVIN, "Registrant.txt");
        boolean resultsUnknown = FileExistsUnknown(VehicleVIN, "Registrant.txt");
        
        if( resultsActive == true ) {
            // VIN is Active
            java.io.File vehiclesFolder = new java.io.File("Vehicles");
            vehiclesFolder.mkdirs();
            java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Active");
            unknownFolder.mkdirs();
            java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
        
            java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
            
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;

    //        outputFileName = "RegistrantInfo.txt";

            try {
                this.registrantJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.registrantJPanel1.getRegistrant().exportCustom());

                outputFileWriter.close();

            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        } else if ( resultsInactive == true ) {
            // VIN is Inactive
            java.io.File vehiclesFolder = new java.io.File("Vehicles");
            vehiclesFolder.mkdirs();
            java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Inactive");
            unknownFolder.mkdirs();
            java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);

            java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
            
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;

    //        outputFileName = "RegistrantInfo.txt";

            try {
                this.registrantJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.registrantJPanel1.getRegistrant().exportCustom());

                outputFileWriter.close();

            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        } else if ( resultsUnknown == true ) {
            // VIN status is Unknown
            java.io.File vehiclesFolder = new java.io.File("Vehicles");
            vehiclesFolder.mkdirs();
            java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
            unknownFolder.mkdirs();
            java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);

            java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Registrant.txt");
            
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;

    //        outputFileName = "RegistrantInfo.txt";

            try {
                this.registrantJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.registrantJPanel1.getRegistrant().exportCustom());

                outputFileWriter.close();

            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "VIN does not exist!", "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonChangeRegistrantActionPerformed

    private void jButtonChangeInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeInsuranceActionPerformed
        // TODO add your handling code here:
        // does not have a status enum
         String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
         
        boolean resultsActive = FileExistsActive(VehicleVIN, "Insurance.txt");
        boolean resultsInactive = FileExistsInactive(VehicleVIN, "Insurance.txt");
        boolean resultsUnknown = FileExistsUnknown(VehicleVIN, "Insurance.txt");
        
        if( resultsActive == true ) {
            // VIN is active
            java.io.File vehiclesFolder = new java.io.File("Vehicles");
            vehiclesFolder.mkdirs();
            java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Active");
            unknownFolder.mkdirs();
            java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);

            java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
            
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;
            
            try {
                this.insuranceJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.insuranceJPanel1.getInsuranceInfo().exportCustom() );

                outputFileWriter.close();
            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        } else if ( resultsInactive == true ) {
            // VIN is inactive
            java.io.File vehiclesFolder = new java.io.File("Vehicles");
            vehiclesFolder.mkdirs();
            java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Inactive");
            unknownFolder.mkdirs();
            java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);

            java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
            
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;
            
            try {
                this.insuranceJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.insuranceJPanel1.getInsuranceInfo().exportCustom() );

                outputFileWriter.close();
            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        } else if ( resultsUnknown == true ) {
            // VIN status is unknown
            java.io.File vehiclesFolder = new java.io.File("Vehicles");
            vehiclesFolder.mkdirs();
            java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
            unknownFolder.mkdirs();
            java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);

            java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + "Insurance.txt");
            
            VINFolder.mkdirs();
            java.io.FileWriter outputFileWriter;
            
            try {
                this.insuranceJPanel1.updateUnderlyingObject();

    //            outputFile = new java.io.File(outputFileName);
                outputFileWriter = new java.io.FileWriter(outputFile);

                outputFileWriter.write( this.insuranceJPanel1.getInsuranceInfo().exportCustom() );

                outputFileWriter.close();
            } catch ( java.lang.Exception ex ) {
                System.out.println( ex.toString() );
            }
        }
        
    }//GEN-LAST:event_jButtonChangeInsuranceActionPerformed

    private void jButtonCheckVINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckVINActionPerformed
        // TODO add your handling code here:
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        
        boolean resultsActive = FileExistsActive(VehicleVIN, "Vehicle.txt");
        boolean resultsInactive = FileExistsInactive(VehicleVIN, "Vehicle.txt");
        boolean resultsUnknown = FileExistsUnknown(VehicleVIN, "Vehicle.txt");
        
        if ((resultsActive == true) || (resultsInactive == true) || (resultsUnknown == true)) {
            JOptionPane.showMessageDialog(rootPane, "VIN already exists!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(rootPane, "VIN is available", "Available", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonCheckVINActionPerformed
    
    // checks to see if a folder exists
    private boolean FileExists( java.io.File File ) {
        boolean results = false;
        
        if ( File.exists() == true ) {
            results = true;
        } else {
            
        }
        
        return( results );
    }
    
    public boolean FileExistsUnknown( String VIN, String fileName ) {
        boolean results = false;
        
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
//        vehiclesFolder.mkdirs();
        java.io.File unknownFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Unknown");
//        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(unknownFolder.getAbsolutePath() + "\\" + VehicleVIN);
//        VINFolder.mkdirs();
        java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + fileName);
        
        if ( outputFile.exists() == true ) {
            results = true;
        } else {
            
        }
        
        return( results );
    }
    
    public boolean FileExistsActive( String VIN, String fileName ) {
        boolean results = false;
        
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
//        vehiclesFolder.mkdirs();
        java.io.File activeFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Active");
//        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(activeFolder.getAbsolutePath() + "\\" + VehicleVIN);
//        VINFolder.mkdirs();
        java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + fileName);
        
        if ( outputFile.exists() == true ) {
            results = true;
        } else {
            
        }
        
        return( results );
    }
    
    public boolean FileExistsInactive( String VIN, String fileName ) {
        boolean results = false;
        
        String VehicleVIN = this.vehicleJPanel1.returnVehicleVIN();
        
        java.io.File vehiclesFolder = new java.io.File("Vehicles");
//        vehiclesFolder.mkdirs();
        java.io.File inactiveFolder = new java.io.File(vehiclesFolder.getAbsolutePath() + "\\" + "Inactive");
//        unknownFolder.mkdirs();
        java.io.File VINFolder = new java.io.File(inactiveFolder.getAbsolutePath() + "\\" + VehicleVIN);
//        VINFolder.mkdirs();
        java.io.File outputFile = new java.io.File(VINFolder.getAbsolutePath() + "\\" + fileName);
        
        if ( outputFile.exists() == true ) {
            results = true;
        } else {
            
        }
        
        return( results );
    }
    
    private String importString( java.io.File inputFile ) {
        String results = "";
        String line = "";
        java.io.FileReader inputFileReader;
        java.io.BufferedReader inputBufferedReader;       
        
        try {
            if (inputFile.exists() == true) {
                inputFileReader = new java.io.FileReader(inputFile);
                inputBufferedReader = new java.io.BufferedReader(inputFileReader);
                
                while ((line = inputBufferedReader.readLine()) != null) {
                    results += line + '\n'; // appends the contents line by line.
                }
                
                inputBufferedReader.close();
            } else {
                results = "";
            }
        } catch (java.lang.Exception ex) {
            System.out.println( ex.toString() );
        }
        
        return( results );
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DMVRSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DMVRSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DMVRSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DMVRSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DMVRSJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private EE333.EmployeeInfo employeeInfo1;
    private EE333.EmployeeJPanel employeeJPanel1;
    private EE333.InsuranceJPanel insuranceJPanel1;
    private javax.swing.JButton jButtonChangeInsurance;
    private javax.swing.JButton jButtonChangeRegistrant;
    private javax.swing.JButton jButtonCheckVIN;
    private javax.swing.JButton jButtonCompleteRegistration;
    private javax.swing.JButton jButtonExportEmployee;
    private javax.swing.JButton jButtonExportInsurance;
    private javax.swing.JButton jButtonExportRegistrant;
    private javax.swing.JButton jButtonExportRegistration;
    private javax.swing.JButton jButtonExportVehicle;
    private javax.swing.JButton jButtonImportEmployee;
    private javax.swing.JButton jButtonImportInsurance;
    private javax.swing.JButton jButtonImportRegistrant;
    private javax.swing.JButton jButtonImportRegistration;
    private javax.swing.JButton jButtonImportVehicle;
    private javax.swing.JButton jButtonMakeInactive;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private EE333.RegistrantJPanel registrantJPanel1;
    private EE333.RegistrationInfoJPanel registrationInfoJPanel1;
    private EE333.VehicleJPanel vehicleJPanel1;
    // End of variables declaration//GEN-END:variables
}
